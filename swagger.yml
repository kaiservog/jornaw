swagger: "2.0"
info:
  description: "Tootalk ferramenta para comunicação corporativa"
  version: "1.0.0"
  title: "Swagger Tootalk"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "cesar.vog@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "tootalk.github.io"
basePath: "/v2"
tags:
- name: "person"
  description: "thing relative to person"
- name: "publication"
  description: "Access to description"
schemes:
- "https"
- "http"
paths:
  /person:
    post:
      tags:
      - "person"
      summary: "Register an user"
      description: ""
      operationId: "addPerson"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "person"
        description: "Person information to register"
        required: true
        schema:
          $ref: "#/definitions/personHide"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - "person"
      summary: "Update an existing person"
      description: ""
      operationId: "updatePerson"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "person"
        description: "Person object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/personHide"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Person not found"
        405:
          description: "Validation exception"
  /person/findByName/{personName}:
    get:
      tags:
      - "person"
      summary: "Finds Persons by name"
      description: "Try to find people with similar name"
      operationId: "findPersonByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personName"
        in: "path"
        description: "Name of the person"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/person"
        400:
          description: "Invalid name value"
  /person/{personId}:
    get:
      tags:
      - "person"
      summary: "Find person by ID"
      description: "Returns a single person"
      operationId: "getPersonById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID of person to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/person"
        400:
          description: "Invalid person ID supplied"
        404:
          description: "Person not found"
  /publication/{publicationId}:
    get:
      tags:
      - "publication"
      summary: "Returns a publication"
      description: "Returns publication"
      operationId: "getPublicationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "publicationId"
        in: "path"
        description: "ID of publication"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/publication"
  /publication/for/person/{personId}:
    get:
      tags:
      - "publication"
      summary: "Returns publications for person id"
      description: "Returns publications for person id"
      operationId: "getPublicationsForPerson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "Person ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/publication"
        400:
          description: "Invalid ID"
        404:
          description: "ID not found"
  /publication/from/{personId}:
    get:
      tags:
      - "publication"
      summary: "Returns publications from person id"
      description: "Returns publications from person id"
      operationId: "getPublicationsFromPerson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "Person ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/publication"
        400:
          description: "Invalid Publication"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  person:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Cesar Voginski"
  personHide:
    type: "object"
    required:
    - "id"
    - "name"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Cesar Voginski"
      password:
        type: "string"
        example: "21D22ADD1"
  publication:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      parent:
        type: "string"
      datetime: 
        type: "string"
        format: "date-time"
      text:
        type: "string"
      author:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"